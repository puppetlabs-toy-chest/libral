#! /bin/bash

# Pack ralsh and supporting files so they can be copied into a Docker
# container. This only makes sense with LIBRAL_STATIC=ON, really

if [ $# -lt 1 ]; then
    echo "usage: $0 PROJECT_BINARY_DIR"
    exit 1
fi

abs_top_builddir=$1

topdir=$(readlink --canonicalize $(dirname $0)/..)

# Build everything
cd $abs_top_builddir

if [ ! -f CMakeCache.txt ]; then
    echo "pass the directory where libral is built as the first argument"
    exit 1
fi

srcdir=$(grep SOURCE_DIR CMakeCache.txt | cut -d = -f 2)
githash=$(cd $srcdir && git describe --always)

# Assemble stuff in ral/
rm -rf ral
mkdir -p ral/bin
cp ./bin/ralsh ral/bin

cat > ral/README <<EOF
This is a statically linked build of https://github.com/puppetlabs/libral.

It was made from commit $githash of that repo on a $(cat /etc/system-release)
machine. The executable should work on any $(uname -m) Linux machine
that has $(rpm -q glibc) or later.
EOF

cp -pr ${topdir}/data ral

#
# Snarf up some augeas lenses that we need
#
augp=$(command -v augparse)
if [ -z "$augp" ]
then
    if [ -x /opt/puppetlabs/puppet/bin/augparse ]; then
        export PATH=$PATH:/opt/puppetlabs/puppet/bin
    else
        echo "could not find augparse anywhere"
        exit 1
    fi
fi

# Terrible hack to help us find builtin lenses we use without any
# modification
cat > ral/data/lenses/dep.aug <<EOF
module Dep =
let l1 = Authorized_keys.lns
let l2 = Hosts.lns
EOF
# Have augparse tell us all the lenses we need
for lns in ral/data/lenses/*.aug
do
    cp -np $(augparse --notypecheck --trace $lns | cut -d ' ' -f 2 | grep ^/) ral/data/lenses
done
rm -rf ral/data/lenses/dep.aug ral/data/lenses/tests

find ral/ -name \*~ -delete

# Reduce the executable as best we can
strip -R .note -R .comment -s ral/bin/*
UPX=$(type -p upx)
if [ -n "$UPX" ]
then
    $UPX -qq ral/bin/*
fi
ln ral/bin/ralsh ral/bin/mirb
ln ral/bin/ralsh ral/bin/mruby

tarball=ralsh-$(date +%Y-%m-%dT%H.%M)-$githash.tgz
tar czf $tarball ral
echo
echo Made $tarball
echo
